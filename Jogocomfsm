library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity Timer_60s is
    port (
        clk : in std_logic; -- Sinal de entrada do clock
        reset : in std_logic;
        time_remaining : out std_logic_vector(23 downto 0);
        stop_game : out std_logic
    );
end entity Timer_60s;

architecture Behavioral of Timer_60s is
    constant CLOCK_FREQ : natural := 50_000_000; -- FrequÃªncia do clock em Hz
    constant GAME_TIME : natural := 60; -- Tempo de jogo em segundos

    signal count : unsigned(31 downto 0); -- Contador interno
    signal time_left : unsigned(23 downto 0); -- Tempo restante interno

begin
    process (clk)
    begin
        if rising_edge(clk) then
            if reset = '1' then
                count <= (others => '0');
                time_left <= unsigned(GAME_TIME * CLOCK_FREQ);
                stop_game <= '0';
            else
                if count = CLOCK_FREQ - 1 then
                    count <= (others => '0');
                    time_left <= time_left - 1;
                    if time_left = 0 then
                        stop_game <= '1'; -- Sinal de parada do jogo quando o tempo acabar
                    end if;
                else
                    count <= count + 1;
                end if;
            end if;
        end if;
    end process;

    time_remaining <= std_logic_vector(time_left);

end architecture Behavioral;


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity Random_Generator is
    port (
        clk : in std_logic;
        stop : in std_logic;
        random_num : out std_logic_vector(7 downto 0)
    );
end entity Random_Generator;

architecture Behavioral of Random_Generator is
    signal seed : unsigned(31 downto 0);

begin
    process (clk)
    begin
        if rising_edge(clk) then
            if stop = '1' then
                seed <= (others => '0');
            else
                seed <= seed + 1;
            end if;
        end if;
    end process;

    process (seed)
        variable gen : std_random := new std_random(seed);
    begin
        wait until rising_edge(clk);
        random_num <= std_logic_vector(to_unsigned(gen.random(gen'range), random_num'length));
    end process;

end architecture Behavioral;


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity Points_Counter is
    port (
        hit : in std_logic;
        reset : in std_logic;
        mole_active : in std_logic;
        points : out std_logic_vector(7 downto 0)
    );
end entity Points_Counter;

architecture Behavioral of Points_Counter is
    signal score : unsigned(7 downto 0);

begin
    process (reset, hit, mole_active)
    begin
        if reset = '1' then
            score <= (others => '0');
        elsif hit = '1' and mole_active = '1' then
            score <= score + 1;
        end if;
    end process;

    points <= std_logic_vector(score);

end architecture Behavioral;


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity Record_Verifier is
    port (
        points : in std_logic_vector(7 downto 0);
        record_score : in std_logic_vector(7 downto 0);
        record_updated : out std_logic
    );
end entity Record_Verifier;

architecture Behavioral of Record_Verifier is

begin
    process (points, record_score)
    begin
        if points > unsigned(record_score) then
            record_updated <= '1';
        else
            record_updated <= '0';
        end if;
    end process;

end architecture Behavioral;


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity Display is
    port (
        points : in std_logic_vector(7 downto 0);
        record_score : in std_logic_vector(7 downto 0);
        clk : in std_logic;
        display_out : out std_logic_vector(7 downto 0)
    );
end entity Display;

architecture Behavioral of Display is
    component SevenSegmentDisplay is
        port (
            clk : in std_logic;
            data : in std_logic_vector(7 downto 0);
            display_out : out std_logic_vector(7 downto 0)
        );
    end component SevenSegmentDisplay;

    signal display_points : std_logic_vector(7 downto 0);
    signal display_record : std_logic_vector(7 downto 0);

begin
    process (points, record_score)
    begin
        display_points <= points;
        display_record <= record_score;
    end process;

    Display_Points: SevenSegmentDisplay
        port map (
            clk => clk,
            data => display_points,
            display_out => display_out(3 downto 0)
        );

    Display_Record: SevenSegmentDisplay
        port map (
            clk => clk,
            data => display_record,
            display_out => display_out(7 downto 4)
        );

end architecture Behavioral;


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity SevenSegmentDisplay is
    port (
        clk : in std_logic;
        data : in std_logic_vector(7 downto 0);
        display_out : out std_logic_vector(7 downto 0)
    );
end entity SevenSegmentDisplay;

architecture Behavioral of SevenSegmentDisplay is
    signal display_reg : std_logic_vector(7 downto 0);
    signal digit_select : std_logic_vector(3 downto 0);

begin
    process (clk)
    begin
        if rising_edge(clk) then
            if digit_select = "0111" then
                display_reg <= data;
            else
                display_reg <= "11111110";
            end if;

            if digit_select = "1000" then
                digit_select <= "0001";
            else
                digit_select <= digit_select + 1;
            end if;
        end if;
    end process;

    display_out <= display_reg;

end architecture Behavioral;


entity Whack_a_Mole is
    port (
        clk_50MHz : in std_logic;
        reset : in std_logic;
        hit : in std_logic;
        mole_pos : out std_logic_vector(7 downto 0);
        time_remaining : out std_logic_vector(23 downto 0);
        stop_game : out std_logic;
        points : in std_logic_vector(7 downto 0);
        record_score : in std_logic_vector(7 downto 0);
        display_out : out std_logic_vector(7 downto 0)
    );
end entity Whack_a_Mole;

architecture Behavioral of Whack_a_Mole is
    type State_Type is (Idle_State, Game_State, Record_Check_State);
    signal current_state : State_Type;
    signal next_state : State_Type;
    
    signal timer_reset : std_logic;
    signal timer_stop : std_logic;
    
    signal random_num : unsigned(7 downto 0);
    signal mole_active : std_logic;
    signal hit_mole : std_logic;
    signal game_points : unsigned(7 downto 0);
    signal record_score_updated : std_logic;
    signal display_score : std_logic_vector(7 downto 0);

begin
    Timer: entity work.Timer_60s
        port map (
            clk => clk_50MHz,
            reset => timer_reset,
            time_remaining => time_remaining,
            stop_game => timer_stop
        );

    Random_Generator: entity work.Random_Generator
        port map (
            clk => clk_50MHz,
            stop => timer_stop,
            random_num => random_num
        );

    Points_Counter: entity work.Points_Counter
        port map (
            hit => hit,
            reset => reset,
            mole_active => mole_active,
            points => game_points
        );

    Record_Verifier: entity work.Record_Verifier
        port map (
            points => game_points,
            record_score => record_score,
            record_updated => record_score_updated
        );

    Display: entity work.Display
        port map (
            points => game_points,
            record_score => record_score,
            clk => clk_50MHz,
            display_out => display_score
        );

    process (reset, timer_stop)
    begin
        if reset = '1' then
            timer_reset <= '1';
            game_points <= (others => '0');
            record_score_updated <= '0';
            next_state <= Idle_State;
        elsif timer_stop = '1' then
            timer_reset <= '1';
            game_points <= (others => '0');
            record_score_updated <= '1';
            next_state <= Record_Check_State;
        else
            timer_reset <= '0';
        end if;
    end process;

    process (clk_50MHz, timer_stop, hit_mole)
    begin
        if rising_edge(clk_50MHz) then
            if timer_stop = '1' or hit_mole = '1' then
                mole_active <= '0';
            elsif timer_stop = '0' and hit_mole = '0' and mole_active = '0' then
                mole_active <= '1';
            end if;
        end if;
    end process;

    process (game_points, record_score, reset)
    begin
        if reset = '1' then
            record_score_updated <= '0';
        elsif game_points > unsigned(record_score) then
            record_score_updated <= '1';
        else
            record_score_updated <= '0';
        end if;
    end process;

    process (clk_50MHz)
    begin
        if rising_edge(clk_50MHz) then
            case current_state is
                when Idle_State =>
                    if reset = '1' then
                        timer_reset <= '1';
                        game_points <= (others => '0');
                        record_score_updated <= '0';
                        next_state <= Idle_State;
                    else
                        timer_reset <= '0';
                        next_state <= Game_State;
                    end if;

                when Game_State =>
                    if timer_stop = '1' then
                        mole_active <= '0';
                        next_state <= Record_Check_State;
                    elsif hit = '1' and mole_active = '1' then
                        game_points <= game_points + 1;
                    end if;

                when Record_Check_State =>
                    if reset = '1' then
                        timer_reset <= '1';
                        game_points <= (others => '0');
                        record_score_updated <= '0';
                        next_state <= Idle_State;
                    elsif timer_stop = '0' then
                        timer_reset <= '0';
                        next_state <= Game_State;
                    end if;

                when others =>
                    next_state <= Idle_State;

            end case;
        end if;
    end process;

    current_state <= next_state;
    mole_pos <= std_logic_vector(random_num);
    hit_mole <= hit;
    display_out <= display_score;

end architecture Behavioral;
